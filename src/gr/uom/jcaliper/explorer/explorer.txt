package gr.uom.jcaliper.explorer;

import gr.uom.jcaliper.metrics.EvaluatedClass;
import gr.uom.jcaliper.system.CratClass;
import gr.uom.jcaliper.system.CratEntity;
import gr.uom.jcaliper.system.CratPackage;
import gr.uom.jcaliper.system.CratSystem;
import gr.uom.jcaliper.system.EntitySet;
import gr.uom.jcaliper.system.IEntityPool;
import gr.uom.jcaliper.system.SystemClass;

import java.util.TreeMap;
import java.util.TreeSet;

/**
 * @author Panagiotis Kouros
 */
public class CraCase implements IEntityPool {

	private final String name;
	private final CratSystem system;
	private final int type; // project or package or class
	private final int boxType;
	private final int totalEntities;
	private final EntitySet systemEntities;
	private final TreeMap<Integer, CratEntity> entities;
	private final TreeMap<Integer, ? extends CratClass> classes;
	private CratState initial;

	public CraCase(CratSystem system, int boxType) {
		super();
		this.system = system;
		this.boxType = boxType;
		name = system.getName();
		if (system.getSystemType() == CratSystem.SYSTEM_PROJECT)
			type = CraCase.CRACASE_PROJECT;
		else
			type = CraCase.CRACASE_PACKAGE;
		if (isUnboxed()) {
			classes = system.getClasses();
			entities = system.getEntities();
			systemEntities = system.getEntitySet();
			totalEntities = system.getTotalEntities();
		} else if (isBoxed()) {
			classes = system.getBoxedClasses();
			entities = system.getBoxedEntities();
			systemEntities = system.getBoxedEntitySet();
			totalEntities = system.getTotalBoxedEntities();
		} else { // isHybrid
			classes = system.getBoxedClasses();
			entities = system.getHybridEntities();
			systemEntities = system.getBoxedEntitySet();
			totalEntities = system.getTotalEntities();
		}
	}

	// Presentation methods

	public String getEntitySetsDetails() {
		StringBuilder sb = new StringBuilder();
		for (int entId : systemEntities) {
			CratEntity e = getEntity(entId);
			sb.append(String.format("%s: %s\n", e.getName(), e.propertiesToText()));
			sb.append(String.format("S(%d)=%-20s\tS(%s)=%s\n", e.getId(), e.getEntitySet(),
					e.getName(), e.getEntitySet().showNamesSet(this)));
			sb.append(String.format("R(%d)=%-20s\tR(%s)=%s\n", e.getId(), e.getRelatives(),
					e.getName(), e.getRelatives().showNamesSet(this)));
			sb.append(String.format("F(%d)=%-20s\tF(%s)=%s\n", e.getId(), e
					.getForbiddenClassmates(), e.getName(), e.getForbiddenClassmates()
					.showNamesSet(this)));
		}
		if (sb.length() > 0)
			sb.setLength(sb.length() - 1); // remove last newline
		return sb.toString();
	}

	public String getEntityBoxesDetails() {
		StringBuilder sb = new StringBuilder();
		for (int entId : systemEntities) {
			CratEntity e = getEntity(entId);
			if (e.isBox())
				sb.append(String.format("B(%d)=%-20s\tB(%s)=%s\n", e.getId(), e.getBoxElements(),
						e.getName(), e.getBoxElements().showNamesSet(this)));
		}
		if (sb.length() > 0)
			sb.setLength(sb.length() - 1); // remove last newline
		return sb.toString();
	}

	public String getClassSetsDetails() {
		StringBuilder sb = new StringBuilder();
		for (int clId : classes.keySet()) {
			SystemClass sysCl = system.getClasses().get(clId);
			sb.append(String.format("%s: %s %s\n", sysCl.getName(), sysCl.getJavaPath(),
					sysCl.propertiesToText()));
			CratClass cl = classes.get(clId);
			sb.append(String.format("S(%d)=%-20s\tS(%s)=%s\n", clId, cl, sysCl.getName(),
					cl.showNamesSet(this)));
			EntitySet rel = getClassRelatives(cl);
			sb.append(String.format("R(%d)=%-20s\tR(%s)=%s\n", clId, rel, sysCl.getName(),
					rel.showNamesSet(this)));
		}
		if (sb.length() > 0)
			sb.setLength(sb.length() - 1); // remove last newline
		return sb.toString();
	}

	public String getPackagesDetails() {
		TreeSet<Integer> packageIds = new TreeSet<Integer>();
		for (int clId : classes.keySet()) {
			CratPackage pkg = system.getClasses().get(clId).getPackage();
			packageIds.add(pkg.getId());
		}
		StringBuilder sb = new StringBuilder();
		for (int pkgId : packageIds) {
			CratPackage pkg = system.getPackages().get(pkgId);
			sb.append(String.format("%s: %s \n", pkg.getName(), pkg));
		}
		if (sb.length() > 0)
			sb.setLength(sb.length() - 1); // remove last newline
		return sb.toString();
	}

	public String getPresentation() {
		StringBuilder sb = new StringBuilder();
		sb.append(systemTypeName()).append(name);
		sb.append(String.format("\n\nPackages\n%s\n", getPackagesDetails()));
		sb.append(String.format("\nClass Sets\n%s\n", getClassSetsDetails()));
		sb.append(String.format("\nEntity Sets\n%s\n", getEntitySetsDetails()));
		if (!isUnboxed())
			sb.append(String.format("\nEntity Boxes\n%s\n", getEntityBoxesDetails()));
		sb.append(String.format("\n%s", getTinyPresentation()));
		sb.append(String.format("\nInitial Evaluation = %8.6f\n\n", initial.getEvaluation()));
		return sb.toString();
	}

	public String getTinyPresentation() {
		StringBuilder sb = new StringBuilder();
		sb.append("Original system: ").append(system.getTinyPresentation());
		sb.append("\n\nProtected model: ").append(systemTypeName()).append(name);
		sb.append(String.format("\n%d entities ", totalEntities));
		sb.append(String.format("(%d attributes + ", howManyAttributes()));
		sb.append(String.format("%d methods) ", howManyMethods()));
		sb.append(String.format("in %d classes, ", classes.size()));
		sb.append(String.format("%d packages\n", howManyPackages()));
		return sb.toString();
	}

	private int howManyMethods() {
		int numOfMethods = 0;
		for (int entId : systemEntities)
			if (getEntity(entId).isMethod())
				numOfMethods++;
		return numOfMethods;
	}

	private int howManyAttributes() {
		int numOfAttrib = 0;
		for (int entId : systemEntities)
			if (getEntity(entId).isAttribute())
				numOfAttrib++;
		return numOfAttrib;
	}

	private int howManyPackages() {
		TreeSet<Integer> packageIds = new TreeSet<Integer>();
		for (int clId : classes.keySet()) {
			CratPackage pkg = system.getClasses().get(clId).getPackage();
			packageIds.add(pkg.getId());
		}
		return packageIds.size();
	}

	private EntitySet getClassRelatives(CratClass cl) {
		EntitySet relatives = new EntitySet();
		for (int entId : cl) {
			CratEntity entity = getEntity(entId);
			relatives.addAll(entity.getRelatives());
		}
		return relatives;
	}

	// Getters and Setters

	public void setInitial(CratState initial) {
		this.initial = initial;
	}

	public CratState getInitial() {
		return initial;
	}

	@Override
	public EntitySet getEntitySet() {
		return systemEntities;
	}

	@Override
	public CratEntity getEntity(int entityId) {
		return entities.get(entityId);
	}

	@Override
	public int getTotalEntities() {
		return totalEntities;
	}

	public int getSystemTotalEntities() {
		return system.getTotalEntities();
	}

	public int getProblemSize() {
		int size = 0;
		for (EvaluatedClass cl : initial.getClasses())
			size += cl.size();
		return size;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @return the name
	 */
	public String getFullName() {
		return systemTypeName() + name;
	}

	public boolean isBoxed() {
		return boxType == CRACASE_BOXED;
	}

	public boolean isUnboxed() {
		return boxType == CRACASE_UNBOXED;
	}

	public boolean isHybrid() {
		return boxType == CRACASE_HYBRID;
	}

	public TreeMap<Integer, ? extends CratClass> getClasses() {
		return classes;
	}

	public int getNumOfClasses() {
		return classes.size();
	}

	public int getNumOfPackages() {
		return system.getPackages().size();
	}

	public String getClassName(int classId) {
		SystemClass sysCl = system.getClasses().get(classId);
		if (sysCl != null)
			return sysCl.getName();
		else
			return "";
	}

	public String getPackageNameOf(int classId) {
		SystemClass sysCl = system.getClasses().get(classId);
		if (sysCl != null)
			return sysCl.getPackage().getName();
		else
			return "";
	}

	public int getCaseType() {
		return type;
	}

	private String systemTypeName() {
		if (type == CRACASE_PROJECT)
			return "project ";
		if (type == CRACASE_PACKAGE)
			return "package ";
		if (type == CRACASE_CLASS)
			return "class ";
		return "";
	}

	// System Types
	public static final int CRACASE_PROJECT = 0;
	public static final int CRACASE_PACKAGE = 1;
	public static final int CRACASE_CLASS = 2;

	// Boxing Types
	public static final int CRACASE_UNBOXED = 0;
	public static final int CRACASE_BOXED = 1;
	public static final int CRACASE_HYBRID = 2;

}
package gr.uom.jcaliper.explorer;

import gr.uom.jcaliper.heuristics.IMove;
import gr.uom.jcaliper.heuristics.IProblemState;
import gr.uom.jcaliper.heuristics.IStateSpaceExplorer;
import gr.uom.jcaliper.heuristics.RandomMoveGenerator;
import gr.uom.jcaliper.metrics.EvaluatedClass;
import gr.uom.jcaliper.metrics.Metric;
import gr.uom.jcaliper.preferences.Preferences;
import gr.uom.jcaliper.system.EntitySet;
import gr.uom.jcaliper.system.HashedClass;

import java.util.ArrayList;
import java.util.Collection;

/**
 * @author Panagiotis Kouros
 */
public class CratExplorer implements IStateSpaceExplorer {

	private CraCase craCase;
	private Navigator navigator;
	private Metric metric;
	private CratState currentState;

	public CratExplorer(CraCase craCase, Metric metric) {
		this.craCase = craCase;
		this.metric = metric;
		currentState = craCase.getInitial().clone();
		EvaluatedClass emptyClass = getEmptyClass();
		navigator = new Navigator(metric.toBeMaximized(), emptyClass);
		navigator.newCurrentState(currentState);
		// System.out.println(metric.getEvaluatedClassesWithDetails());
	}

	public CratExplorer(IStateSpaceExplorer explorer) {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void moveTo(IProblemState problemState) {
		currentState = (CratState) problemState;
		navigator.newCurrentState(currentState);
	}

	@Override
	public void doMove(IMove move) {
		// System.out.println(metric.getTopEvaluatedClasses(10));
		EvaluatedClass origin = ((CratMove) move).getFrom();
		EvaluatedClass target = ((CratMove) move).getTo();
		int moving = ((CratMove) move).getMoving();
		if (PRINT_DEBUG_INFO)
			System.out.format("> Moving %d from %s to %s\n", moving, origin, target);
		// Get the new classes
		HashedClass hashed = new HashedClass(origin.without(moving));
		EvaluatedClass new1 = metric.getEvaluatedClass(hashed);
		hashed = new HashedClass(target.plus(moving));
		EvaluatedClass new2 = metric.getEvaluatedClass(hashed);
		// Delete old classes
		currentState.remove(origin.getHash());
		navigator.removeClass(origin);
		currentState.remove(target.getHash());
		navigator.removeClass(target);
		// Add new classes
		if (new1.size() > 0) // do not add empty classes to state
			currentState.put(new1.getHash(), new1);
		currentState.put(new2.getHash(), new2);
		currentState.evaluation += (new1.getEvaluation() + new2.getEvaluation())
				- origin.getEvaluation() - target.getEvaluation();
		navigator.addClass(new1);
		navigator.addClass(new2);
		// System.out.println(metric.getEvaluatedClassesWithDetails());
	}

	@Override
	public IProblemState getCurrentState() {
		return currentState;
	}

	@Override
	public IProblemState getInitialState() {
		return craCase.getInitial();
	}

	@Override
	public double evaluate(IMove move) {
		return ((CratMove) move).getMoveGain();
	}

	@Override
	public IMove getBestMove() {
		return navigator.getBestMove();
	}

	@Override
	public IMove getAMoveBetterThan(double threshold) {
		return navigator.getAMoveBetterThan(threshold);
	}

	@Override
	public int getNumOfFeasibleMoves() {
		return navigator.getNumOfFeasibleMoves();
	}

	@Override
	public Collection<? extends IMove> getEvaluatedMoves() {
		// System.out.println(navigator.getTopEvaluatedMoves(10));
		return navigator.moves;
	}

	@Override
	public IMove getRandomMove() {
		return navigator.getRandomMove();
	}

	@Override
	public Collection<? extends IProblemState> getSomeRandomStates(int numOfStates) {
		ArrayList<CratState> states = new ArrayList<CratState>();
		states.add(craCase.getInitial());
		return states;
		// TODO create some feasible initial states (ILS?)
	}

	@Override
	public RandomMoveGenerator getRandomMoveGenerator() {
		return navigator.getRandomMoveGenerator();
	}

	public void clear() {
		if (navigator != null)
			navigator.clear();
		if (metric != null)
			metric.clear();
	}

	@Override
	public void finalize() throws Throwable {
		clear();
		super.finalize();
	}

	public EvaluatedClass getEmptyClass() {
		HashedClass empty = new HashedClass(new EntitySet());
		return metric.getEvaluatedClass(empty);
	}

	public String getNavigatorStatistics() {
		StringBuilder sb = new StringBuilder();
		sb.append(String.format("Min deterioration: %14.12f\n", navigator.getMinDeterioration()));
		sb.append(String.format("Max deterioration: %14.12f\n", navigator.getMaxDeterioration()));
		return sb.toString();
	}

	@Override
	public int getProblemSize() {
		return craCase.getProblemSize();
	}

	@Override
	public double getMaxDeterioration() {
		return (2.0) / craCase.getTotalEntities();
	}

	@Override
	public boolean currentStateIsLocalOptimum() {
		return (navigator.getNumOfImprovingMoves() == 0);
	}

	// Don't modify next line. Change the static value in class Preferences
	protected static final boolean PRINT_DEBUG_INFO = Preferences.PRINT_DEBUG_INFO;

}
package gr.uom.jcaliper.explorer;

import gr.uom.jcaliper.heuristics.IMove;
import gr.uom.jcaliper.metrics.EvaluatedClass;

/**
 * @author Panagiotis Kouros
 */
public class CratMove implements IMove {
	private int moveId;
	final protected int moving;
	final protected EvaluatedClass from;
	final protected EvaluatedClass to;
	final protected ComparisonPolicy comparisonPolicy;
	protected double gain;

	/**
	 * @param moving
	 * @param from
	 * @param to
	 * @param cost
	 */
	public CratMove(int moveId, int moving, EvaluatedClass from, EvaluatedClass to,
			boolean biggerValueIsBetter) {
		this.moveId = moveId;
		this.moving = moving;
		this.from = from;
		this.to = to;
		gain = from.getExitGain(moving) + to.getEntryGain(moving);
		if (biggerValueIsBetter)
			comparisonPolicy = new BiggerValueIsBetter();
		else
			comparisonPolicy = new SmallerValueIsBetter();
	}

	@Override
	public void setMoveId(int moveId) {
		this.moveId = moveId;
	}

	@Override
	public int getMoveId() {
		return moveId;
	}

	@Override
	public double getMoveGain() {
		return gain;
	}

	@Override
	public boolean isBetterThan(double threshold) {
		return comparisonPolicy.compare(gain, threshold);
	}

	@Override
	public int getTabuAttribute() {
		return moving;
	}

	@Override
	public boolean isBetter() {
		return isBetterThan(0.0);
	}

	/**
	 * @return the moving entity
	 */
	public int getMoving() {
		return moving;
	}

	/**
	 * @return the from
	 */
	public EvaluatedClass getFrom() {
		return from;
	}

	/**
	 * @return the to
	 */
	public EvaluatedClass getTo() {
		return to;
	}

	private interface ComparisonPolicy {
		public boolean compare(double value1, double value2);
	}

	private class BiggerValueIsBetter implements ComparisonPolicy {
		@Override
		public boolean compare(double value1, double value2) {
			return ((value1 - value2) > 1e-10);
		}
	}

	private class SmallerValueIsBetter implements ComparisonPolicy {
		@Override
		public boolean compare(double value1, double value2) {
			return ((value2 - value1) > 1e-10);
		}
	}

}
package gr.uom.jcaliper.explorer;

import gr.uom.jcaliper.heuristics.IProblemState;
import gr.uom.jcaliper.metrics.EvaluatedClass;
import gr.uom.jcaliper.metrics.Metric;
import gr.uom.jcaliper.system.CratClass;
import gr.uom.jcaliper.system.HashedClass;

import java.util.Collection;
import java.util.TreeMap;

/**
 * @author Panagiotis Kouros
 */
public class CratState extends TreeMap<Long, EvaluatedClass> implements IProblemState {

	protected final ComparisonPolicy comparisonPolicy;
	protected double evaluation;

	public CratState(CraCase craCase, Metric metric) {
		super();
		if (metric.toBeMaximized())
			comparisonPolicy = new BiggerValuesAreBetter();
		else
			comparisonPolicy = new SmallerValuesAreBetter();
		for (CratClass cl : craCase.getClasses().values())
			if (cl.size() > 0) {
				HashedClass hashed = new HashedClass(cl);
				EvaluatedClass evalClass = metric.getEvaluatedClass(hashed);
				put(evalClass.getHash(), evalClass);
			}
		updateEvaluation();
	}

	public CratState(EvaluatedClass evaluated, Metric metric) {
		super();
		if (metric.toBeMaximized())
			comparisonPolicy = new BiggerValuesAreBetter();
		else
			comparisonPolicy = new SmallerValuesAreBetter();
		put(evaluated.getHash(), evaluated);
		updateEvaluation();
	}

	public CratState(Collection<EvaluatedClass> classes, Metric metric) {
		super();
		if (metric.toBeMaximized())
			comparisonPolicy = new BiggerValuesAreBetter();
		else
			comparisonPolicy = new SmallerValuesAreBetter();
		for (EvaluatedClass evaluated : classes)
			put(evaluated.getHash(), evaluated);
		updateEvaluation();
	}

	public CratState(CratClass unhashed, Metric metric) {
		super();
		if (metric.toBeMaximized())
			comparisonPolicy = new BiggerValuesAreBetter();
		else
			comparisonPolicy = new SmallerValuesAreBetter();
		HashedClass hashed = new HashedClass(unhashed);
		EvaluatedClass evalClass = metric.getEvaluatedClass(hashed);
		put(evalClass.getHash(), evalClass);
		updateEvaluation();
	}

	public CratState(CratState prototype) {
		comparisonPolicy = prototype.comparisonPolicy;
		evaluation = prototype.evaluation;
		putAll(prototype);
	}

	@Override
	public CratState clone() {
		return new CratState(this);
	}

	@Override
	public boolean isBetterThan(double threshold) {
		return comparisonPolicy.compare(evaluation, threshold);
	}

	@Override
	public double getEvaluation() {
		return evaluation;
	}

	@Override
	public long getHash() {
		long hash = 0;
		for (EvaluatedClass cl : values())
			hash = ((hash << 3) - hash) + cl.getHash(); // 7 * hash + classHash
		return hash;
	}

	private void updateEvaluation() {
		evaluation = 0.0;
		for (EvaluatedClass cl : values())
			evaluation += cl.getEvaluation();
	}

	public Collection<EvaluatedClass> getClasses() {
		return values();
	}

	public String showClasses() {
		StringBuilder sb = new StringBuilder();
		for (EvaluatedClass cl : values())
			sb.append(cl);
		return sb.toString();
	}

	public String showDetails() {
		StringBuilder sb = new StringBuilder();
		for (EvaluatedClass cl : values())
			sb.append(cl.showDetails()).append('\n');
		return sb.toString();
	}

	@Override
	public String toString() {
		if (size() == 0)
			return "{}";
		StringBuilder sb = new StringBuilder(size() << 2); // 4*size()
		sb.append("{");
		for (CratClass e : values())
			sb.append(e).append('|');
		sb.setLength(sb.length() - 1); // delete last character
		sb.append("}");
		return sb.toString();
	}

	public int getNumOfClasses() {
		return size();
	}

	// internal interface and classes

	private interface ComparisonPolicy {
		public boolean compare(double value1, double value2);
	}

	private class BiggerValuesAreBetter implements ComparisonPolicy {
		@Override
		public boolean compare(double value1, double value2) {
			return ((value1 - value2) > 1e-10);
		}
	}

	private class SmallerValuesAreBetter implements ComparisonPolicy {
		@Override
		public boolean compare(double value1, double value2) {
			return ((value2 - value1) > 1e-10);
		}
	}

	private static final long serialVersionUID = 1L;

}package gr.uom.jcaliper.explorer;

/**
 * @author Panagiotis Kouros
 */
public class MoveStatistics {

	public int nFeasibleMoves;

	public int nGoodMoves;

	public double bestGain;

	public double worstGain;

	public double gainAverage;

	public double gainStdDev;

	/**
	 * @param nFeasibleMoves
	 * @param nGoodMoves
	 * @param bestGain
	 * @param worstGain
	 * @param gainAverage
	 * @param gainStdDev
	 */
	public MoveStatistics(int nFeasibleMoves, int nGoodMoves, double bestGain, double worstGain,
			double gainAverage, double gainStdDev) {
		super();
		this.nFeasibleMoves = nFeasibleMoves;
		this.nGoodMoves = nGoodMoves;
		this.bestGain = bestGain;
		this.worstGain = worstGain;
		this.gainAverage = gainAverage;
		this.gainStdDev = gainStdDev;
	}

}
package gr.uom.jcaliper.explorer;

import gr.uom.jcaliper.heuristics.RandomMoveGenerator;
import gr.uom.jcaliper.metrics.EvaluatedClass;

import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Random;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

/**
 * @author Panagiotis Kouros
 */
public class Navigator {

	final ComparisonPolicy comparison;
	final boolean biggerValueIsBetter;
	private TreeMap<Long, EvaluatedClass> classes = new TreeMap<Long, EvaluatedClass>();
	private EvaluatedClass empty;
	protected TreeSet<CratMove> moves = new TreeSet<CratMove>(new MoveComparator());
	private double sumOfGain = 0.0;
	private double sumOfGain2 = 0.0;
	private double minDeterioration = 0.0;
	private double maxDeterioration = 0.0;
	private int improvingMoves = 0;
	private Random rand = new Random(0);

	public Navigator(boolean biggerValueIsBetter, EvaluatedClass empty) {
		this.biggerValueIsBetter = biggerValueIsBetter;
		if (biggerValueIsBetter) {
			comparison = new BiggerValueIsBetter();
			minDeterioration = -1e10;
			maxDeterioration = 1e10;
		} else {
			comparison = new SmallerValueIsBetter();
			minDeterioration = 1e10;
			maxDeterioration = -1e10;
		}

		this.empty = empty;
		classes.put(empty.getHash(), empty);
	}

	public void newCurrentState(CratState state) {
		classes.clear();
		moves.clear();
		sumOfGain = 0.0;
		sumOfGain2 = 0.0;
		improvingMoves = 0;
		classes.put(empty.getHash(), empty);
		for (EvaluatedClass cl : state.values())
			addClass(cl);
	}

	public void removeClass(EvaluatedClass removed) {
		if (removed.size() == 0)
			return; // moves to empty class should be always available
		Iterator<CratMove> it = moves.iterator();
		while (it.hasNext()) {
			CratMove move = it.next();
			if ((move.from == removed) || (move.to == removed)) {
				removeMove(move); // in fact: prepare to remove
				it.remove();
			}
		}
		classes.remove(removed.getHash());
	}

	public void addClass(EvaluatedClass newClass) {
		if (newClass.size() == 0)
			return; // moves to empty class are already updated
		boolean oneMemberClass = (newClass.size() == 1);
		for (int entId : newClass.candidatesForExit())
			for (EvaluatedClass target : classes.values()) {
				// Don't add moves from oneMemberClass to empty class
				boolean targetIsEmpty = (target.size() == 0);
				if (target.candidatesForEntry().contains(entId)
						&& (!oneMemberClass || !targetIsEmpty)) {
					CratMove move = new CratMove(0, entId, newClass, target, biggerValueIsBetter);
					addMove(move);
				}
			}
		for (int entId : newClass.candidatesForEntry())
			for (EvaluatedClass origin : classes.values())
				if (origin.candidatesForExit().contains(entId)) {
					CratMove move = new CratMove(0, entId, origin, newClass, biggerValueIsBetter);
					addMove(move);
				}
		classes.put(newClass.getHash(), newClass);
	}

	private void removeMove(CratMove move) {
		sumOfGain -= move.gain;
		sumOfGain2 -= move.gain * move.gain;
		if (comparison.isGood(move.gain))
			improvingMoves--;
		// move will be removed by the iterator
		// and not by: 'feasibleMoves.remove(move)'
	}

	private void addMove(CratMove move) {
		sumOfGain += move.gain;
		sumOfGain2 += move.gain * move.gain;
		if (comparison.isGood(move.gain))
			improvingMoves++;
		if (comparison.compare(0, move.gain)) {
			if (comparison.compare(move.gain, minDeterioration))
				minDeterioration = move.gain;
			if (comparison.compare(maxDeterioration, move.gain))
				maxDeterioration = move.gain;
		}
		moves.add(move);
	}

	public CratMove getBestMove() {
		if (moves.size() > 0)
			return moves.first();
		return null;
	}

	public CratMove getAMoveBetterThan(double threshold) {
		// System.out.println(getTopEvaluatedMoves(50));
		if (moves.size() == 0)
			return null;
		if (!((moves.first()).isBetterThan(threshold)))
			return null;
		// Create a fake move with gain=threshold
		CratMove fake = new CratMove(0, 0, empty, empty, true);
		fake.gain = threshold;
		// Get all moves better than fake
		CratMove move = moves.floor(fake);
		SortedSet<CratMove> betterMoves = moves.subSet(moves.first(), move);
		if (betterMoves.size() < 2)
			return moves.first();
		// Return random move from 'betterMoves'
		return getRandomFromCollection(betterMoves);
	}

	public CratMove getRandomMove() {
		// System.out.println(getTopEvaluatedMoves(50));
		return getRandomFromCollection(moves);
	}

	private CratMove getRandomFromCollection(Collection<CratMove> movePool) {
		if (movePool.size() == 0)
			return null;
		int position = rand.nextInt(movePool.size());
		Iterator<CratMove> it = movePool.iterator();
		while (position-- > 0)
			;
		it.next();
		return it.next();
	}

	public RandomMoveGenerator getRandomMoveGenerator() {
		return new RandomMoveGenerator(moves);
	}

	public int getNumOfFeasibleMoves() {
		return moves.size();
	}

	public double getMoveGainAverage() {
		if (moves.size() > 0)
			return sumOfGain / moves.size();
		return 0.0;
	}

	public double getMoveGainStdDev() {
		if (moves.size() > 1)
			return Math.sqrt((sumOfGain2 - (moves.size() * sumOfGain * sumOfGain))
					/ (moves.size() - 1));
		return 0.0;
	}

	public double getGoodMovesMetric() {
		return (double) improvingMoves / moves.size();
	}

	/**
	 * @return the minDeterioration
	 */
	public double getMinDeterioration() {
		return minDeterioration;
	}

	/**
	 * @return the maxDeterioration
	 */
	public double getMaxDeterioration() {
		return maxDeterioration;
	}

	public void clear() {
		if (classes != null)
			classes.clear();
		if (moves != null)
			moves.clear();
	}

	@Override
	public void finalize() throws Throwable {
		clear();
		super.finalize();
	}

	private class MoveComparator implements Comparator<CratMove> {
		@Override
		public int compare(CratMove move1, CratMove move2) {
			if (comparison.compare(move1.gain, move2.gain))
				return -1;
			else if (comparison.compare(move2.gain, move1.gain))
				return 1;
			else if (move1.from.getHash() < move2.from.getHash())
				return -1;
			else if (move1.from.getHash() > move2.from.getHash())
				return 1;
			else if (move1.to.getHash() < move2.to.getHash())
				return -1;
			else if (move1.to.getHash() > move2.to.getHash())
				return 1;
			else if (move1.moving < move2.moving)
				return -1;
			else if (move1.moving > move2.moving)
				return 1;
			else
				return 0;
		}
	}

	private interface ComparisonPolicy {
		public boolean compare(double value1, double value2);

		public boolean isGood(double value);
	}

	private class BiggerValueIsBetter implements ComparisonPolicy {
		@Override
		public boolean compare(double value1, double value2) {
			return (value1 - value2) > 1e-10;
		}

		@Override
		public boolean isGood(double value) {
			return (value > 1e-10);
		}
	}

	private class SmallerValueIsBetter implements ComparisonPolicy {
		@Override
		public boolean compare(double value1, double value2) {
			return ((value2 - value1) > 1e-10);
		}

		@Override
		public boolean isGood(double value) {
			return (value < -1e-10);
		}
	}

	public String getTopEvaluatedMoves(int howMany) {
		StringBuilder sb = new StringBuilder();
		sb.append(String.format("Top %d of evaluated moves\n", howMany));
		for (CratMove move : moves) {
			sb.append(String.format("%d from %s to %s\t%10.8f\n", move.moving, move.from, move.to,
					move.gain));
			if (--howMany <= 0)
				break;
		}
		return sb.toString();
	}

	public int getNumOfImprovingMoves() {
		return improvingMoves;
	}
}
