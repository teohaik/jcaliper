/**
 * 
 */
package gr.uom.jcaliper.heuristics;

public class HeuristicFactory {

	// Supported heuristic algorithms
	public static final int HILL_CLIMBING_STEEPEST = 0;
	public static final int HILL_CLIMBING_FIRST_CHOICE = 1;
	public static final int TABU_SEARCH = 2;
	public static final int TABU_SEARCH_DYNAMIC = 3;
	public static final int SIMULATED_ANNEALING = 4;
	// public static final int TABU_SEARCH_RANDOMIZED = 5;

	private static final int MIN_VALID_HEURISTIC_ID = 0;
	private static final int MAX_VALID_HEURISTIC_ID = 4;

	public static boolean isValidHeuristicId(int heuristicId) {
		return (heuristicId >= MIN_VALID_HEURISTIC_ID) && (heuristicId <= MAX_VALID_HEURISTIC_ID);
	}

	public static SearchAlgorithm getHeuristic(int heuristicId, IStateSpaceExplorer explorer,
			IProblemState startingPoint, IOptimaPool pool, ISearchLogger logger) {
		SearchAlgorithm heuristic = null;
		switch (heuristicId) {
		case HILL_CLIMBING_STEEPEST:
			heuristic = new HillClimbing(explorer, startingPoint, pool, logger,
					HillClimbing.USE_HC_STEEPEST);
			break;
		case HILL_CLIMBING_FIRST_CHOICE:
			heuristic = new HillClimbing(explorer, startingPoint, pool, logger,
					HillClimbing.USE_HC_FIRST_CHOICE);
			;
			break;
		case TABU_SEARCH:
			heuristic = new TabuSearch(explorer, startingPoint, pool, logger);
			;
			break;
		case TABU_SEARCH_DYNAMIC:
			heuristic = new TabuSearchDynamic(explorer, startingPoint, pool, logger);
			;
			break;
		case SIMULATED_ANNEALING:
			heuristic = new SimulatedAnnealing(explorer, startingPoint, pool, logger);
			;
			break;

		default:
			break;
		}
		return heuristic;
	}
}
package gr.uom.jcaliper.heuristics;

public class HillClimbing extends SearchAlgorithm {

	// What Hill Climbing algorithm to use ?
	public static final int USE_HC_FIRST_CHOICE = 1;
	public static final int USE_HC_STEEPEST = 2;
	private int heuristicId;

	private int useHillClimber = USE_HC_FIRST_CHOICE;

	/**
	 * @param explorer
	 * @param pool
	 * @param moveLogger
	 */
	public HillClimbing(IStateSpaceExplorer explorer, IOptimaPool pool, ISearchLogger logger) {
		super(explorer, pool, logger);
		setUseHillClimbing(USE_HC_FIRST_CHOICE);
	}

	/**
	 * @param explorer
	 * @param startingPoint
	 * @param pool
	 * @param moveLogger
	 */
	public HillClimbing(IStateSpaceExplorer explorer, IProblemState startingPoint,
			IOptimaPool pool, ISearchLogger logger) {
		super(explorer, startingPoint, pool, logger);
		setUseHillClimbing(USE_HC_FIRST_CHOICE);
	}

	/**
	 * @param explorer
	 * @param pool
	 * @param moveLogger
	 * @param useHillClimber
	 */
	public HillClimbing(IStateSpaceExplorer explorer, IOptimaPool pool, ISearchLogger logger,
			int useHillClimber) {
		super(explorer, pool, logger);
		setUseHillClimbing(useHillClimber);
	}

	/**
	 * @param explorer
	 * @param startingPoint
	 * @param pool
	 * @param moveLogger
	 * @param useHillClimber
	 */
	public HillClimbing(IStateSpaceExplorer explorer, IProblemState startingPoint,
			IOptimaPool pool, ISearchLogger moveLogger, int useHillClimber) {
		super(explorer, startingPoint, pool, moveLogger);
		setUseHillClimbing(useHillClimber);
	}

	/**
	 * @param useHillClimbing
	 *            the useHillClimbing to set
	 */
	public void setUseHillClimbing(int useHillClimber) {
		this.useHillClimber = useHillClimber;
		if (useHillClimber == USE_HC_STEEPEST) {
			name = "Hill Climbing (Steepest)";
			shortName = "HC_ST";
			heuristicId = HeuristicFactory.HILL_CLIMBING_STEEPEST;
		} else { // default
			name = "Hill Climbing (First Choice)";
			shortName = "HC_FC";
			heuristicId = HeuristicFactory.HILL_CLIMBING_FIRST_CHOICE;
		}
	}

	@Override
	public IProblemState getOptimum() {
		startTimer();
		logStart();
		if (useHillClimber == USE_HC_STEEPEST)
			bestSolution = steepest().clone();
		else
			bestSolution = firstChoice().clone();
		storeBestSolution();
		logEnd();
		return bestSolution;
	}

	// H.C. First Choice Implementation
	private IProblemState firstChoice() {
		do {
			IMove nextMove = getABetterMove();
			if ((nextMove != null) && nextMove.isBetter())
				doMove(nextMove);
			else
				return currentState;
			if (timeOver())
				return currentState;
		} while (true);
	}

	// H.C. Steepest Ascent Implementation
	private IProblemState steepest() {
		do {
			IMove nextMove = getBestMove();
			if ((nextMove != null) && nextMove.isBetter())
				doMove(nextMove);
			else
				return currentState;
			if (timeOver())
				return currentState;
		} while (true);
	}

	@Override
	public int getAlgorithmId() {
		return heuristicId;
	}

}
package gr.uom.jcaliper.heuristics;

/**
 * @author Panagiotis Kouros
 */
public interface IMove {

	public void setMoveId(int moveId);

	public int getMoveId();

	public double getMoveGain();

	public boolean isBetterThan(double threshold);

	public boolean isBetter();

	public int getTabuAttribute();

}
package gr.uom.jcaliper.heuristics;

public interface IOptimaPool {

    void storeLocalOptimum(SearchAlgorithm algorithm, IProblemState optimum, int moveId,
            long time);

}
package gr.uom.jcaliper.heuristics;

public interface IProblemState {

	public IProblemState clone();

	public double getEvaluation();

	public boolean isBetterThan(double threshold);

	public long getHash();

}
package gr.uom.jcaliper.heuristics;

public interface ISearchLogger {

	// Logging methods

	public void logStart(SearchAlgorithm algorithm, IProblemState startingState,
			int moveId, long time);

	public void logMove(SearchAlgorithm algorithm, IProblemState currentState,
			IProblemState bestSolution, IMove move, long time);

	public void logJump(SearchAlgorithm algorithm, IProblemState currentState,
			IProblemState bestSolution, int moveId, long time, String info);

	public void logLocalOptimum(SearchAlgorithm algorithm, IProblemState currentState,
			IProblemState bestSolution, int moveId, long time, String info);

	public void logInfo(SearchAlgorithm algorithm, IProblemState currentState,
			IProblemState bestSolution, int moveId, long time, String info);

	public void logLabel(SearchAlgorithm algorithm, IProblemState currentState,
			IProblemState bestSolution, int moveId, long time, String labelText);

	public void logEnd(SearchAlgorithm algorithm, IProblemState currentState,
			IProblemState bestSolution, int moveId, long time);

}
package gr.uom.jcaliper.heuristics;

import java.util.Collection;

public interface IStateSpaceExplorer {

	// Problem information

	public int getProblemSize();

	public double getMaxDeterioration();

	// Moving in state space

	public void moveTo(IProblemState problemState);

	public void doMove(IMove move);

	public IProblemState getCurrentState();

	public IProblemState getInitialState();

	// Evaluating states or candidate moves

	public double evaluate(IMove move);

	public IMove getBestMove();

	public IMove getAMoveBetterThan(double threshold);

	// Getting all possible moves

	public int getNumOfFeasibleMoves();

	/**
	 * Returns a list of all feasible moves
	 * The moves are sorted by evaluation (best is first)
	 */
	public Collection<? extends IMove> getEvaluatedMoves();

	// Getting random moves or states

	public IMove getRandomMove();

	public RandomMoveGenerator getRandomMoveGenerator();

	public Collection<? extends IProblemState> getSomeRandomStates(int howMany);

	public boolean currentStateIsLocalOptimum();

}
package gr.uom.jcaliper.heuristics;

import java.util.Collection;
import java.util.Random;
import java.util.TreeMap;

public class RandomMoveGenerator {

	private TreeMap<Integer, IMove> map = new TreeMap<Integer, IMove>();
	private static Random rand = new Random(0);

	public RandomMoveGenerator(Collection<? extends IMove> moves /* , MoveStatistics stats */) {
		int index = 0;
		for (IMove move : moves)
			map.put(index++, move);
	}

	public IMove getRandomMove() {
		if (map.size() > 0)
			return map.get(rand.nextInt(map.size()));
		return null;
	}

}
package gr.uom.jcaliper.heuristics;

import gr.uom.jcaliper.loggers.ActivityLogger;
import gr.uom.jcaliper.plugin.Activator;
import gr.uom.jcaliper.preferences.Preferences;

import java.util.Collection;

import org.eclipse.jface.preference.IPreferenceStore;

/**
 * @author Panagiotis Kouros
 */
public abstract class SearchAlgorithm {

	protected String name;
	protected String shortName;

	// Common for all algorithms
	protected IStateSpaceExplorer explorer;
	protected IOptimaPool pool = null;
	protected IProblemState currentState;
	protected IProblemState bestSolution;

	// Logging variables
	protected int moveId = -1; // on moveTo(initial): moveId=0
	protected long startTime;
	protected long stopTime;
	protected long logTime;
	protected ISearchLogger logger = null;

	// CONSTRUCTORS

	/**
	 * @param explorer
	 * @param pool
	 * @param moveLogger
	 */
	public SearchAlgorithm(IStateSpaceExplorer explorer, IOptimaPool pool, ISearchLogger moveLogger) {
		this.explorer = explorer;
		moveTo(explorer.getInitialState().clone());
		bestSolution = currentState.clone();
		this.pool = pool;
		logger = moveLogger;
		initializeTimeLimit();
	}

	/**
	 * @param explorer
	 * @param startingPoint
	 * @param pool
	 * @param moveLogger
	 */
	public SearchAlgorithm(IStateSpaceExplorer explorer, IProblemState startingPoint,
			IOptimaPool pool, ISearchLogger moveLogger) {
		this.explorer = explorer;
		moveTo(startingPoint.clone());
		bestSolution = currentState.clone();
		this.pool = pool;
		logger = moveLogger;
		initializeTimeLimit();
	}

	// Each algorithm overrides these methods
	// with their special implementation
	public abstract int getAlgorithmId();

	public abstract IProblemState getOptimum();

	// SOME IMPLEMENTED UTILITIES - ALL ALGORITHMS CAN USE THEM

	// For moving: moveTo() and makeMove()

	/**
	 * Used for a move to a completely new position
	 * 
	 * @param problemState
	 */
	protected void moveTo(IProblemState problemState) {
		moveId++;
		explorer.moveTo(problemState);
		currentState = explorer.getCurrentState();
	}

	/**
	 * Used for moves to neighbor positions
	 * 
	 * @param move
	 *            the move
	 */
	protected void doMove(IMove move) {
		moveId++;
		move.setMoveId(moveId);
		explorer.doMove(move);
		currentState = explorer.getCurrentState();
		if (logger != null)
			logger.logMove(this, currentState, bestSolution, move, elapsedTime());
		if (currentStateIsLocalOptimum()) {
			storeSolution(currentState);
			logLocalOptimum("reached ");
		}
		// System.out.format("EPS=%10.8f\t%d moved from %s to %s\t%s\n",
		// currentState.getEvaluation(),
		// ((CratMove) move).getMoving(), ((CratMove) move).getFrom(),
		// ((CratMove) move).getTo(), currentState);
	}

	protected void storeBestSolution() {
		if (pool != null)
			pool.storeLocalOptimum(this, bestSolution, moveId, elapsedTime());
	}

	protected void storeSolution(IProblemState state) {
		if (pool != null)
			pool.storeLocalOptimum(this, state, moveId, elapsedTime());
	}

	protected IProblemState improveSolution(IProblemState solution) {
		if (solution != null)
			return (solution);
		// Do hill climbing steepest
		// TODO clone explorer
		HillClimbing hillClimber = new HillClimbing(explorer, solution, pool, logger);
		hillClimber.setMoveId(moveId);
		hillClimber.setUseHillClimbing(HillClimbing.USE_HC_STEEPEST);
		IProblemState steepestBest = hillClimber.getOptimum();
		storeSolution(steepestBest);
		currentState = steepestBest;
		logLocalOptimum(String.format("Improved by %s", hillClimber.getShortName()));
		// Do hill climbing first choice
		hillClimber = new HillClimbing(explorer, solution, pool, logger);
		hillClimber.setMoveId(moveId);
		hillClimber.setUseHillClimbing(HillClimbing.USE_HC_FIRST_CHOICE);
		IProblemState firstChoiceBest = hillClimber.getOptimum();
		storeSolution(firstChoiceBest);
		currentState = firstChoiceBest;
		logLocalOptimum(String.format("Improved by %s", hillClimber.getShortName()));

		if (steepestBest.isBetterThan(firstChoiceBest.getEvaluation()))
			return steepestBest;
		else
			return firstChoiceBest;
	}

	// Delegating explorer methods

	protected int getProblemSize() {
		return explorer.getProblemSize();
	}

	protected double getMaxDeterioration() {
		return explorer.getMaxDeterioration();
	}

	protected boolean currentStateIsLocalOptimum() {
		return explorer.currentStateIsLocalOptimum();
	}

	protected double evaluate(IMove move) {
		return explorer.evaluate(move);
	}

	public IMove getBestMove() {
		return explorer.getBestMove();
	};

	public IMove getABetterMove() {
		return explorer.getAMoveBetterThan(0);
	}

	public int getNumOfFeasibleMoves() {
		return explorer.getNumOfFeasibleMoves();
	}

	public Collection<? extends IMove> getEvaluatedMoves() {
		return explorer.getEvaluatedMoves();
	}

	public IMove getRandomMove() {
		return explorer.getRandomMove();
	};

	public RandomMoveGenerator getRandomMoveGenerator() {
		return explorer.getRandomMoveGenerator();
	};

	public Collection<? extends IProblemState> getSomeRandomStates(int howMany) {
		return explorer.getSomeRandomStates(howMany);
	};

	// Logging methods

	protected void logStart() {
		String message = String.format("\n*** %s started   : initial fitness value: %8.6f",
				shortName, currentState.getEvaluation());
		ActivityLogger.info(message);
		if (logger != null)
			logger.logStart(this, currentState, moveId, elapsedTime());
	}

	protected void logJump(String message) {
		if (logger != null)
			logger.logJump(this, currentState, bestSolution, moveId, elapsedTime(), message);
	}

	protected void logLocalOptimum(String message) {
		if (logger != null)
			logger.logLocalOptimum(this, currentState, bestSolution, moveId, elapsedTime(), message);
	}

	protected void logInfo(String message) {
		if (logger != null)
			logger.logInfo(this, currentState, bestSolution, moveId, elapsedTime(), message);
	}

	protected void logLabel(String labelText) {
		if (logger != null)
			logger.logLabel(this, currentState, bestSolution, moveId, elapsedTime(), labelText);
	}

	protected void logEnd() {
		String message = String.format("\n*** %s completed : optimum fitness value: %8.6f",
				shortName, bestSolution.getEvaluation());
		ActivityLogger.info(message);
		if (logger != null)
			logger.logEnd(this, currentState, bestSolution, moveId, elapsedTime());
	}

	// Timer methods

	protected void startTimer() {
		startTime = System.currentTimeMillis();
		stopTime = startTime + MAX_RUNNING_TIME * 1000;
		logTime = startTime + LOG_INTERVAL; // is already in millis
	};

	protected long elapsedTime() {
		return System.currentTimeMillis() - startTime;
	}

	protected boolean timeOver() {
		final String MSG_TIMEOVER = "*** TimeOver!";
		final String MSG_ABORTED = "*** Interrupted by user!";
		long currentTimeMillis = System.currentTimeMillis();
		if (currentTimeMillis > logTime) {
			String message = String.format(
					"\n*** %s is running: %d moves, best fitness: %8.6f",
					shortName,
					moveId,
					(bestSolution.isBetterThan(currentState.getEvaluation()) ? bestSolution
							.getEvaluation() : currentState.getEvaluation()));
			ActivityLogger.info(message);
			logTime += LOG_INTERVAL;
		}

		if (LIMIT_TIME && (currentTimeMillis > stopTime)) {
			ActivityLogger.info("\n" + MSG_TIMEOVER + "\n");
			logInfo(MSG_TIMEOVER);
			return true;
		}

		if (ABORTED) {
			ActivityLogger.info("\n" + MSG_ABORTED + "\n");
			logInfo(MSG_ABORTED);
			return true;
		}

		return false;
	}

	// Getters and Setters

	/**
	 * @return the explorer
	 */
	public IStateSpaceExplorer getExplorer() {
		return explorer;
	}

	/**
	 * @param explorer
	 *            the explorer to set
	 */
	public void setExplorer(IStateSpaceExplorer explorer) {
		this.explorer = explorer;
	}

	/**
	 * @return the pool
	 */
	public IOptimaPool getPool() {
		return pool;
	}

	/**
	 * @param pool
	 *            the pool to set
	 */
	public void setPool(IOptimaPool pool) {
		this.pool = pool;
	}

	/**
	 * @param moveId
	 *            the moveId to set
	 */
	public void setMoveId(int moveId) {
		this.moveId = moveId;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @return the shortName
	 */
	public String getShortName() {
		return shortName;
	}

	public int getNumOfPerfomedMoves() {
		return moveId;
	}

	private void initializeTimeLimit() {
		IPreferenceStore store = Activator.getDefault().getPreferenceStore();
		LIMIT_TIME = store.getBoolean(Preferences.P_SEARCH_LIMIT_TIME);
		MAX_RUNNING_TIME = store.getInt(Preferences.P_SEARCH_MAX_RUNNING_TIME);
		LOG_INTERVAL = 30000; // 30sec
	}

	// if LIMIT_TIME is true,
	// algorithm stops after MAX_RUNNING_TIME milliseconds
	public boolean LIMIT_TIME;
	public int MAX_RUNNING_TIME;
	public long LOG_INTERVAL;

	public static boolean ABORTED = false;
}
package gr.uom.jcaliper.heuristics;

import gr.uom.jcaliper.preferences.Preferences;

import java.util.Random;

/**
 * @author Panagiotis Kouros
 */
public class SimulatedAnnealing extends SearchAlgorithm {

	private final static Random random = new Random(0);
	private RandomMoveGenerator moveGen;

	/**
	 * @param explorer
	 * @param pool
	 * @param moveLogger
	 */
	public SimulatedAnnealing(IStateSpaceExplorer explorer, IOptimaPool pool, ISearchLogger logger) {
		super(explorer, pool, logger);
		name = "Simulated Annealing";
		shortName = "SA";
	}

	/**
	 * @param explorer
	 * @param startingPoint
	 * @param pool
	 * @param moveLogger
	 */
	public SimulatedAnnealing(IStateSpaceExplorer explorer, IProblemState startingPoint,
			IOptimaPool pool, ISearchLogger logger) {
		super(explorer, startingPoint, pool, logger);
		name = "Simulated Annealing";
		shortName = "SA";
	}

	@Override
	public IProblemState getOptimum() {
		startTimer();
		logStart();

		// The temperature
		double T = defineInitialTemperature(); // T(0)
		// The number of trials on each temperature level
		int N = 100 * getProblemSize(); // N(0)
		if (N > MAX_INITIAL_NUMBER_OF_TRIALS)
			N = MAX_INITIAL_NUMBER_OF_TRIALS;
		// The temperature levels counter
		int k = 1;
		// The most recent level with solution improvement
		int lastLevelWithImprovement = 0;
		int levelsWithoutImprovement;
		moveGen = getRandomMoveGenerator();

		do { // temperature level trials
			logInfo(String.format("Temperature Level %d", k));
			logLabel(String.format("%d", k));
			for (int trial = 1; trial <= N; trial++) {
				IMove candidate = moveGen.getRandomMove();
				if (candidate == null)
					return bestSolution; // no feasible moves
				if (candidate.isBetter()) {
					// Always accept better candidate
					doMove(candidate);
					if (currentState.isBetterThan(bestSolution.getEvaluation())) {
						bestSolution = currentState.clone();
						lastLevelWithImprovement = k;
					}
				} else {
					// Accept candidate move with Boltzmann probability
					if (moveIsAccepted(candidate, T)) {
						doMove(candidate);
					}
				}

				if (timeOver())
					return bestSolution;
			}
			levelsWithoutImprovement = k - lastLevelWithImprovement;
			k++;
			N *= TRIALS_INCREASING_RATE; // trials on next level
			T *= COOLING_RATE; // Temperature on next level
		} while (levelsWithoutImprovement <= MAX_LEVELS_WITHOUT_IMPROVEMENT);
		// bestSolution = improveSolution(bestSolution);
		logEnd();
		bestSolution = improveSolution(bestSolution);
		return bestSolution;
	}

	protected boolean moveIsAccepted(IMove move, double T) {
		double deltaEvaluation = -Math.abs(move.getMoveGain());
		double acceptionProbability = Math.exp(deltaEvaluation / T);
		return (random.nextDouble() < acceptionProbability);
	}

	protected double defineInitialTemperature() {
		return getMaxDeterioration() / -Math.log(INITIAL_ACCEPTANCE);
	}

	@Override
	protected void doMove(IMove move) {
		super.doMove(move);
		moveGen = getRandomMoveGenerator();
		// TODO use move statistics to self-adapt temperature
	}

	@Override
	public int getAlgorithmId() {
		return HeuristicFactory.SIMULATED_ANNEALING;
	}

	// Don't modify next lines. Change the static values in class Preferences
	private static final double INITIAL_ACCEPTANCE = Preferences.INITIAL_ACCEPTANCE;
	private static final int MAX_INITIAL_NUMBER_OF_TRIALS = Preferences.MAX_INITIAL_NUMBER_OF_TRIALS;
	private static final double TRIALS_INCREASING_RATE = Preferences.TRIALS_INCREASING_RATE;
	private static final double COOLING_RATE = Preferences.COOLING_RATE;
	private static final int MAX_LEVELS_WITHOUT_IMPROVEMENT = Preferences.MAX_UNPRODUCTIVE_LEVELS;

}
package gr.uom.jcaliper.heuristics;

import java.util.Map;
import java.util.TreeMap;

/**
 * @author Panagiotis Kouros
 */
public class TabuMemory {

	private int tabuTenure;
	private TreeMap<Integer, Integer> tabuList = new TreeMap<Integer, Integer>();

	public void setTenure(int tabuTenure) {
		this.tabuTenure = tabuTenure;
	}

	public void update(int moveId, IMove move) {
		tabuList.put(move.getTabuAttribute(), moveId);
		// System.out.println(getTabuList());
	}

	public boolean isPermitted(int moveId, IMove move) {
		if (!tabuList.containsKey(move.getTabuAttribute()))
			return true;
		return (moveId - tabuList.get(move.getTabuAttribute()) > tabuTenure);
	}

	public String getTabuList() {
		StringBuilder sb = new StringBuilder();
		for (Map.Entry<Integer, Integer> entry : tabuList.entrySet())
			sb.append(entry.getKey()).append(':').append(entry.getValue()).append('\n');
		return sb.toString();
	}

	public void reset() {
		tabuList.clear();
	}
}
package gr.uom.jcaliper.heuristics;

/**
 * @author Panagiotis Kouros
 */
public class TabuSearch extends SearchAlgorithm {

	private TabuMemory tabuMemory = new TabuMemory();
	private int tabuTenure;
	private int maxUnproductiveMoves;

	/**
	 * @param explorer
	 * @param pool
	 * @param moveLogger
	 */
	public TabuSearch(IStateSpaceExplorer explorer, IOptimaPool pool, ISearchLogger logger) {
		super(explorer, pool, logger);
		name = "Tabu Search";
		shortName = "TS";
		tabuTenure = 5 * (int) Math.sqrt(getProblemSize());
		tabuMemory.setTenure(tabuTenure);
		maxUnproductiveMoves = 200 * (int) Math.sqrt(getProblemSize());
	}

	/**
	 * @param explorer
	 * @param startingPoint
	 * @param pool
	 * @param moveLogger
	 */
	public TabuSearch(IStateSpaceExplorer explorer, IProblemState startingPoint, IOptimaPool pool,
			ISearchLogger logger) {
		super(explorer, startingPoint, pool, logger);
		name = "Tabu Search";
		shortName = "TS";
		tabuTenure = 5 * (int) Math.sqrt(getProblemSize());
		tabuMemory.setTenure(tabuTenure);
		maxUnproductiveMoves = 50 * (int) Math.sqrt(getProblemSize());
	}

	@Override
	public IProblemState getOptimum() {
		startTimer();
		logStart();

		int stepsWithoutImprovement = 0;
		do {
			IMove bestMove = getBestPermittedMove();
			if (bestMove == null) // no available moves
				break;
			doMove(bestMove);
			if (currentState.isBetterThan(bestSolution.getEvaluation())) {
				bestSolution = currentState.clone();
				stepsWithoutImprovement = 0;
			} else
				stepsWithoutImprovement++;
			// TODO tabu tenure comparison
			// updateTabuTenure();
			if (timeOver())
				break;
		} while (stepsWithoutImprovement < maxUnproductiveMoves);
		// improveBestSolution();
		logEnd();
		bestSolution = improveSolution(bestSolution);
		return bestSolution;
	}

	/**
	 * @param tabuMemory
	 *            the tabuMemory to set
	 */
	public void setTabuMemory(TabuMemory tabuMemory) {
		this.tabuMemory = tabuMemory;
	}

	@Override
	protected void doMove(IMove move) {
		super.doMove(move);
		tabuMemory.update(moveId, move);
	}

	private IMove getBestPermittedMove() {
		// 'Aspiration': when a move leads to new best solution, permit it
		double aspirationThreshold = bestSolution.getEvaluation() - currentState.getEvaluation();
		for (IMove move : getEvaluatedMoves())
			if (move.isBetterThan(aspirationThreshold) || isPermitted(move))
				return move;
		// If permitted move not found, retry without restrictions
		for (IMove move : getEvaluatedMoves())
			return move;
		// Obviously there are no feasible moves
		return null;
	}

	protected void updateTabuTenure() {
		tabuMemory.setTenure(tabuTenure);
	}

	private boolean isPermitted(IMove move) {
		return tabuMemory.isPermitted(moveId, move);
	};

	@Override
	public int getAlgorithmId() {
		return HeuristicFactory.TABU_SEARCH;
	}

}
package gr.uom.jcaliper.heuristics;

/**
 * @author Panagiotis Kouros
 */
public class TabuSearchDynamic extends SearchAlgorithm {

	// The tabu memory
	private TabuMemory tabuMemory = new TabuMemory();

	// Tenure parameters
	private int tabuTenure;
	private int minTenure;
	private int maxTenure;
	private int increaseStep;
	private int decreaseStep;
	private boolean increaseTenure = true;

	// stop conditions
	private int maxUnproductiveMoves;

	/**
	 * @param explorer
	 * @param pool
	 * @param moveLogger
	 */
	public TabuSearchDynamic(IStateSpaceExplorer explorer, IOptimaPool pool, ISearchLogger logger) {
		super(explorer, pool, logger);
		name = "Tabu Search - Dynamic Tenure";
		shortName = "TS_DYN";
		initializeTabuParameters();
	}

	/**
	 * @param explorer
	 * @param startingPoint
	 * @param pool
	 * @param moveLogger
	 */
	public TabuSearchDynamic(IStateSpaceExplorer explorer, IProblemState startingPoint,
			IOptimaPool pool, ISearchLogger logger) {
		super(explorer, startingPoint, pool, logger);
		name = "Tabu Search - Dynamic Tenure";
		shortName = "TS_DYN";
		initializeTabuParameters();
	}

	@Override
	public IProblemState getOptimum() {
		startTimer();
		logStart();

		int unproductiveMoves = 0;
		do {
			IMove bestMove = getBestPermittedMove();
			if (bestMove == null) // no more feasible moves
				break;
			doMove(bestMove);
			if (currentState.isBetterThan(bestSolution.getEvaluation())) {
				bestSolution = currentState.clone();
				unproductiveMoves = 0;
			} else
				unproductiveMoves++;
			if (currentStateIsLocalOptimum())
				redefineTenure();
		} while ((unproductiveMoves < maxUnproductiveMoves) && !timeOver());

		logEnd();
		bestSolution = improveSolution(bestSolution);
		return bestSolution;
	}

	private void initializeTabuParameters() {
		final int TENURE_STEPS = 20;
		int size = getProblemSize();
		minTenure = (int) Math.sqrt(size);
		maxTenure = 5 * minTenure;
		if (maxTenure > size)
			maxTenure = size;
		tabuTenure = minTenure;
		tabuMemory.setTenure(tabuTenure);
		int step = (maxTenure - minTenure) / TENURE_STEPS;
		if (step < 1)
			step = 1;
		increaseStep = 3 * step;
		decreaseStep = 2 * step;
		maxUnproductiveMoves = 50 * minTenure;
	}

	private void redefineTenure() {
		if (increaseTenure) {
			tabuTenure += increaseStep;
			if (tabuTenure > maxTenure)
				tabuTenure = minTenure;
		} else {
			tabuTenure -= decreaseStep;
			if (tabuTenure < minTenure)
				tabuTenure = minTenure;
		}
		tabuMemory.setTenure(tabuTenure);
		logInfo(String.format("Tabu tenure = %d", tabuTenure));
		increaseTenure = !increaseTenure; // toggle
	}

	public void setTabuTenure(int tenure) {
		tabuMemory.setTenure(tabuTenure);
		logInfo(String.format("Tabu tenure = %d", tabuTenure));
	}

	public void setTabuMemory(TabuMemory tabuMemory) {
		this.tabuMemory = tabuMemory;
	}

	@Override
	protected void doMove(IMove move) {
		super.doMove(move);
		tabuMemory.update(moveId, move);
	}

	private IMove getBestPermittedMove() {
		// 'Aspiration': when a move leads to new best solution, permit it
		double aspirationThreshold = bestSolution.getEvaluation() - currentState.getEvaluation();
		for (IMove move : getEvaluatedMoves())
			if (move.isBetterThan(aspirationThreshold) || isPermitted(move))
				return move;
		// If permitted move not found, retry without restrictions
		for (IMove move : getEvaluatedMoves())
			return move;
		// Obviously there are no feasible moves
		return null;
	}

	private boolean isPermitted(IMove move) {
		return tabuMemory.isPermitted(moveId, move);
	};

	@Override
	public int getAlgorithmId() {
		return HeuristicFactory.TABU_SEARCH_DYNAMIC;
	}

}
