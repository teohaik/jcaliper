package gr.uom.jcaliper.preferences;

import gr.uom.jcaliper.plugin.Activator;

import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
import org.eclipse.jface.preference.IPreferenceStore;

/**
 * Class used to initialize default preference values.
 * 
 * @author Panagiotis Kouros
 */
public class PreferenceInitializer extends AbstractPreferenceInitializer {

	@Override
	public void initializeDefaultPreferences() {
		IPreferenceStore store = Activator.getDefault().getPreferenceStore();

		store.setDefault(Preferences.P_LOG_RESULTS, false);
		store.setDefault(Preferences.P_LOG_PATH, System.getProperty("user.home") + "\\CRAT");
		store.setDefault(Preferences.P_LOG_RESULTS_FILE,
				store.getDefaultString(Preferences.P_LOG_PATH) + "\\CRAT_results.log");

		store.setDefault(Preferences.P_DO_PREOPTIMIZE, true);
		store.setDefault(Preferences.P_USE4SYS_HILL_CLIMBING_STEEPEST, true);
		store.setDefault(Preferences.P_USE4SYS_HILL_CLIMBING_FIRST_CHOICE, true);
		store.setDefault(Preferences.P_USE4SYS_TABU_SEARCH, true);
		store.setDefault(Preferences.P_USE4SYS_TABU_SEARCH_DYNAMIC, true);
		store.setDefault(Preferences.P_USE4SYS_SIMULATED_ANNEALING, false);

		store.setDefault(Preferences.P_SEARCH_LIMIT_TIME, false);
		store.setDefault(Preferences.P_HC_MAX_CLIMBING_TIMES, 10);
		store.setDefault(Preferences.P_SEARCH_MAX_RUNNING_TIME, 600);

	}

}
﻿package gr.uom.jcaliper.preferences;

import gr.uom.jcaliper.plugin.Activator;

import org.eclipse.jface.preference.BooleanFieldEditor;
import org.eclipse.jface.preference.DirectoryFieldEditor;
import org.eclipse.jface.preference.FieldEditor;
import org.eclipse.jface.preference.FieldEditorPreferencePage;
import org.eclipse.jface.preference.FileFieldEditor;
import org.eclipse.jface.preference.IntegerFieldEditor;
import org.eclipse.jface.util.PropertyChangeEvent;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPreferencePage;

/**
 * @author Panagiotis Kouros
 */
public class PreferencePage extends FieldEditorPreferencePage implements IWorkbenchPreferencePage {

	private BooleanFieldEditor useForSysHCSteepestEditor;
	private BooleanFieldEditor useForSysHCFirstChoiceEditor;
	private BooleanFieldEditor useForSysHCTabuSearchEditor;
	private BooleanFieldEditor useForSysHCTabuSearchDynEditor;
	private BooleanFieldEditor useForSysHCSimAnnealingEditor;
	private BooleanFieldEditor doPreoptimizeEditor;
	private BooleanFieldEditor logResultsEditor;
	private DirectoryFieldEditor logPathEditor;
	private FileFieldEditor logResultsFileEditor;
	private BooleanFieldEditor limitTimeEditor;
	private IntegerFieldEditor maxRunningTimeEditor;

	public PreferencePage() {
		super(GRID);
		setPreferenceStore(Activator.getDefault().getPreferenceStore());
		setDescription("Class Responsibility Assignment Tool Preferences");
	}

	/**
	 * Creates the field editors. Field editors are abstractions of
	 * the common GUI blocks needed to manipulate various types
	 * of preferences. Each field editor knows how to save and
	 * restore itself.
	 */
	@Override
	public void createFieldEditors() {

		useForSysHCSteepestEditor = new BooleanFieldEditor(
				Preferences.P_USE4SYS_HILL_CLIMBING_STEEPEST,
				"Use &Hill Climbing - Steepest Asc./Descent", getFieldEditorParent());
		addField(useForSysHCSteepestEditor);

		useForSysHCFirstChoiceEditor = new BooleanFieldEditor(
				Preferences.P_USE4SYS_HILL_CLIMBING_FIRST_CHOICE,
				"Use Hill Climbing - &First Choice", getFieldEditorParent());
		addField(useForSysHCFirstChoiceEditor);

		useForSysHCTabuSearchEditor = new BooleanFieldEditor(Preferences.P_USE4SYS_TABU_SEARCH,
				"Use &Tabu Search w Static Tenure", getFieldEditorParent());
		addField(useForSysHCTabuSearchEditor);

		useForSysHCTabuSearchDynEditor = new BooleanFieldEditor(
				Preferences.P_USE4SYS_TABU_SEARCH_DYNAMIC, "Use Tabu Search w &Dynamic Tenure",
				getFieldEditorParent());
		addField(useForSysHCTabuSearchDynEditor);

		useForSysHCSimAnnealingEditor = new BooleanFieldEditor(
				Preferences.P_USE4SYS_SIMULATED_ANNEALING, "Use &Simulated Annealing",
				getFieldEditorParent());
		addField(useForSysHCSimAnnealingEditor);

		doPreoptimizeEditor = new BooleanFieldEditor(Preferences.P_DO_PREOPTIMIZE,
				"&Pre-optimize at class/package level", getFieldEditorParent());
		addField(doPreoptimizeEditor);

		logResultsEditor = new BooleanFieldEditor(Preferences.P_LOG_RESULTS,
				"&Log searching moves and results", getFieldEditorParent());
		addField(logResultsEditor);

		logPathEditor = new DirectoryFieldEditor(Preferences.P_LOG_PATH, "Moves log path:",
				getFieldEditorParent());
		logPathEditor.setEnabled(logResultsEditor.getBooleanValue(), getFieldEditorParent());
		logPathEditor.setEmptyStringAllowed(false);
		addField(logPathEditor);

		logResultsFileEditor = new FileFieldEditor(Preferences.P_LOG_RESULTS_FILE,
				"Results log file:", getFieldEditorParent());
		logResultsFileEditor.setEnabled(logResultsEditor.getBooleanValue(), getFieldEditorParent());
		logResultsFileEditor.setEmptyStringAllowed(false);
		addField(logResultsFileEditor);

		limitTimeEditor = new BooleanFieldEditor(Preferences.P_SEARCH_LIMIT_TIME,
				"&Limit running time", getFieldEditorParent());
		addField(limitTimeEditor);

		maxRunningTimeEditor = new IntegerFieldEditor(Preferences.P_SEARCH_MAX_RUNNING_TIME,
				"Ma&x time per algorithm (sec)", getFieldEditorParent());
		maxRunningTimeEditor.setEnabled(limitTimeEditor.getBooleanValue(), getFieldEditorParent());
		maxRunningTimeEditor.setEmptyStringAllowed(false);
		addField(maxRunningTimeEditor);

		updateDependentFields();
	}

	@Override
	public void propertyChange(PropertyChangeEvent event) {
		super.propertyChange(event);
		if (event.getProperty().equals(FieldEditor.VALUE)
				&& ((event.getSource() == logResultsEditor) || (event.getSource() == limitTimeEditor)))
			updateDependentFields();
	}

	private void updateDependentFields() {
		logPathEditor.setEnabled(logResultsEditor.getBooleanValue(), getFieldEditorParent());
		logResultsFileEditor.setEnabled(logResultsEditor.getBooleanValue(), getFieldEditorParent());
		maxRunningTimeEditor.setEnabled(limitTimeEditor.getBooleanValue(), getFieldEditorParent());
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)
	 */
	@Override
	public void init(IWorkbench workbench) {
	}

}﻿package gr.uom.jcaliper.preferences;

import gr.uom.jcaliper.explorer.CraCase;
import gr.uom.jcaliper.metrics.MetricFactory;

/**
 * Constant definitions for plug-in preferences
 * 
 * @author Panagiotis Kouros
 */
public class Preferences {

	// Handle the problem case to optimize as unboxed (plain), boxed or hybrid
	// (uncomment one line)
	public static final int CASE_TYPE = CraCase.CRACASE_BOXED;
	// public static final int CASE_TYPE = CraCase.CRACASE_UNBOXED;
	// public static final int CASE_TYPE = CraCase.CRACASE_HYBRID;

	// Metric to use (uncomment one line)
	public static final int SELECTED_METRIC = MetricFactory.EP;
	// public static final int SELECTED_METRIC = MetricFactory.EP_MOD;

	// Print detailed description of calculations
	// public static final boolean PRINT_DEBUG_INFO = true;
	public static final boolean PRINT_DEBUG_INFO = false;

	// TABU SEARCH
	public static final int MAX_UNPRODUCTIVE_STEPS = 10000;

	// SIMULATED ANNEALING
	// 1. Initial Temperature
	// On start, let's accept the maximum deterioration uphill move
	// with probability A% (suggested value is usually 85%)
	public static final double INITIAL_ACCEPTANCE = 0.30; // i.e. A%=85%
	// 2. Number of trials on each temperature level
	public static final int MAX_INITIAL_NUMBER_OF_TRIALS = 10000; // N(0)
	public static final double TRIALS_INCREASING_RATE = 1.05; // use: >= 1.0
	// 3. Rate of cooling
	public static final double COOLING_RATE = 0.90; // use: 0.80-0.99
	// 4. Stopping criterion
	public static final int MAX_UNPRODUCTIVE_LEVELS = 3;

	public static final String P_LOG_RESULTS = "logResultsPreference";
	public static final String P_LOG_PATH = "logPathPreference";
	public static final String P_LOG_RESULTS_FILE = "logResultsFilePreference";

	public static final String P_DO_PREOPTIMIZE = "doPreoptimizePreference";
	public static final String P_USE4SYS_HILL_CLIMBING_STEEPEST = "useForSysHillClimbingSteepest";
	public static final String P_USE4SYS_HILL_CLIMBING_FIRST_CHOICE = "useForSysHillClimbingFirstChoice";
	public static final String P_USE4SYS_TABU_SEARCH = "useForSysTabuSearch";
	public static final String P_USE4SYS_TABU_SEARCH_DYNAMIC = "useForSysTabuSearchDynamic";
	public static final String P_USE4SYS_SIMULATED_ANNEALING = "useForSysSimulatedAnnealing";

	public static final String P_HC_MAX_CLIMBING_TIMES = "HC_MaximumClimbingTimes";
	public static final String P_SEARCH_LIMIT_TIME = "Search_LimitTime";
	public static final String P_SEARCH_MAX_RUNNING_TIME = "Search_MaxRunningTime";

}
